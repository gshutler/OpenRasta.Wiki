<?xml version="1.0"?>
<doc>
  <assembly>
    <name>OpenRasta</name>
  </assembly>
  <members>
    <member name="M:OpenRasta.Binding.ChangeSetBinder`1.#ctor(OpenRasta.TypeSystem.IType,System.String)">
      <summary>
            Constructs a new binder for types of type ChangeSet.
            </summary>
      <param name="type">
      </param>
      <param name="objectName">
      </param>
    </member>
    <member name="T:OpenRasta.Binding.KeyedValues`1">
      <summary>
            Represent a string key associated with a series of values and a converter, used to match key and values pairs with the keyvalue binder.
            </summary>
      <typeparam name="T">The type of the values.</typeparam>
    </member>
    <member name="T:OpenRasta.Codecs.CodecMatch">
      <summary>
            Represents the result of matching a codec to method parameters.
            </summary>
    </member>
    <member name="T:OpenRasta.Codecs.IKeyedValuesMediaTypeReader`1">
      <summary>
            Represents a codec that can transform an entity into a set of named values.
            </summary>
      <typeparam name="TValue">The type of the values associated with each key.</typeparam>
    </member>
    <member name="T:OpenRasta.Codecs.MediaTypeAttribute">
      <summary>
            Defines the default media types supported by a codec.
            </summary>
    </member>
    <member name="T:OpenRasta.Codecs.HtmlErrorCodec">
      <summary>
            Codec rendering error messages collected during the processing of a request.
            </summary>
    </member>
    <member name="M:OpenRasta.Codecs.SupportedTypeAttribute.#ctor(System.Type)">
      <summary>
            Defines a type a codec is supporting by default.
            </summary>
      <param name="supportedType">The type a codec can convert from / to.</param>
    </member>
    <member name="T:OpenRasta.CodeDom.Compiler.MarkupElementModifier">
      <summary>
            Supports IElement elements, and render them as html elements dealing with their own encoding.
            </summary>
    </member>
    <member name="T:OpenRasta.CodeDom.Compiler.UnencodedOutputModifier">
      <summary>
            Supports writing data without conversion to the output stream, whenever they are of type UnencodedOutput.
            </summary>
    </member>
    <member name="M:OpenRasta.Collections.ObservableIteratorExtensions.AsObservable``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}},System.Action{``0},System.Action{``0})">
      <summary>
            Filters an enumerable and notify when elements are selected or discarded.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="target">
      </param>
      <param name="filter">
      </param>
      <param name="onSelected">
      </param>
      <param name="onDiscarded">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:OpenRasta.Collections.ObservableIterator`1">
      <summary>
            Provides an iterator that can notify on elements being selected or discarded.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:OpenRasta.Configuration.HasExtensions.ResourcesWithKey(OpenRasta.Configuration.Fluent.IHas,System.Object)">
      <exception cref="T:System.ArgumentNullException">
        <c>has</c> is null.</exception>
    </member>
    <member name="M:OpenRasta.Configuration.UsesExtensions.CustomDependency``2(OpenRasta.Configuration.Fluent.IUses,OpenRasta.DI.DependencyLifetime)">
      <summary>
            Registers a custom dependency that can be used for leveraging dependency injection.
            </summary>
      <typeparam name="TService">The type of the service to register</typeparam>
      <typeparam name="TConcrete">The concrete type used when the service type is requested</typeparam>
      <param name="anchor">
      </param>
      <param name="lifetime">The lifetime of the object.</param>
    </member>
    <member name="M:OpenRasta.Configuration.UsesExtensions.PipelineContributor``1(OpenRasta.Configuration.Fluent.IUses)">
      <summary>
            Adds a contributor to the pipeline.
            </summary>
      <typeparam name="TPipeline">The type of the pipeline contributor to register.</typeparam>
      <param name="anchor">
      </param>
    </member>
    <member name="M:OpenRasta.Configuration.UsesExtensions.UriDecorator``1(OpenRasta.Configuration.Fluent.IUses)">
      <summary>
            Adds a URI decorator to process incoming URIs.
            </summary>
      <typeparam name="TDecorator">The type of the URI decorator.</typeparam>
      <param name="anchor">
      </param>
    </member>
    <member name="M:OpenRasta.Configuration.XmlSeralizerConfiguration.AsXmlSerializer(OpenRasta.Configuration.Fluent.ICodecParentDefinition)">
      <summary>
            Enables reading and writing resource representations using the framework's <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </summary>
      <param name="parentDefinition">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:OpenRasta.Collections.NullBehaviorDictionary`2">
      <summary>
            Provides an implementation of IDictionary&lt;TKey,TValue&gt; that automatically replaces missing values
            with null.
            </summary>
    </member>
    <member name="T:OpenRasta.DI.IDependencyResolverAccessor">
      <summary>
            Provides an instance of the dependency resolver to be used with OpenRasta.
            </summary>
    </member>
    <member name="M:OpenRasta.Handlers.HandlerRepository.AddResourceHandler(System.Object,OpenRasta.TypeSystem.IType)">
      <exception cref="T:System.ArgumentException">The provided handler is already registered.</exception>
    </member>
    <member name="M:OpenRasta.Configuration.Fluent.Implementation.ResourceDefinition.AtUri(System.String)">
      <exception cref="T:System.ArgumentNullException">
        <c>uri</c> is null.</exception>
    </member>
    <member name="P:OpenRasta.Configuration.Fluent.Implementation.ResourceDefinition.WithoutUri">
      <exception cref="T:System.InvalidOperationException">Cannot make a resource URI-less if a URI is already registered.</exception>
    </member>
    <member name="P:OpenRasta.Configuration.ResourceSpace.Has">
      <summary>
            Registers resources
            </summary>
    </member>
    <member name="T:OpenRasta.Configuration.IDependencyRegistrar">
      <summary>
            Provides the initial set of dependencies required to initialize OpenRasta.
            </summary>
    </member>
    <member name="M:OpenRasta.Configuration.IDependencyRegistrar.Register(OpenRasta.DI.IDependencyResolver)">
      <summary>
            Registers the default dependencies.
            </summary>
    </member>
    <member name="T:OpenRasta.DI.DependencyManager">
      <summary>
            Provides easy access to common services and dependency-specific properties.
            </summary>
    </member>
    <member name="M:OpenRasta.DI.DependencyManager.GetService(System.Type)">
      <summary>
            Resolve a component, optionally registering it in the container if <see cref="P:OpenRasta.DI.DependencyManager.AutoRegisterDependencies" /> is set to <c>true</c>.
            </summary>
      <param name="dependencyType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.DI.DependencyManager.SetResolver(OpenRasta.DI.IDependencyResolver)">
      <summary>
            Set a dependency resolver for the current thread
            </summary>
      <param name="resolver">An instance of a dependency resolver.</param>
      <remarks>If no dependency registrar is registered in the container, the <see cref="T:OpenRasta.Configuration.DefaultDependencyRegistrar" /> will be used instead.</remarks>
    </member>
    <member name="P:OpenRasta.DI.DependencyManager.AutoRegisterDependencies">
      <summary>
            Gets or sets a value defining if unregistered dependencies resolved through a call to <see cref="M:OpenRasta.DI.DependencyManager.GetService(System.Type)" /> 
            are automatically registered in the container.
            </summary>
      <remarks>This covers user-specified codecs, handlers and any type provided to the <see cref="M:OpenRasta.DI.DependencyManager.GetService(System.Type)" /> method.
            <c>true</c> by default.</remarks>
    </member>
    <member name="M:OpenRasta.DI.DependencyResolverExtensions.AddDependency``1(OpenRasta.DI.IDependencyResolver)">
      <summary>
            Adds a concrete dependency to the resolver.
            </summary>
      <typeparam name="TConcrete">The concrete type to register.</typeparam>
      <param name="resolver">
      </param>
    </member>
    <member name="M:OpenRasta.DI.DependencyResolverExtensions.AddDependency``1(OpenRasta.DI.IDependencyResolver,OpenRasta.DI.DependencyLifetime)">
      <summary>
            Adds a concrete dependency with the specified lifetime.
            </summary>
      <typeparam name="TConcrete">The concrete type to register.</typeparam>
      <param name="resolver">
      </param>
      <param name="lifetime">The lifetime of the type.</param>
    </member>
    <member name="M:OpenRasta.DI.DependencyResolverExtensions.AddDependency``2(OpenRasta.DI.IDependencyResolver)">
      <summary>
            Adds a dependency of type <typeparamref name="TService" />, implemented by the type <typeparamref name="TConcrete" />.
            </summary>
      <typeparam name="TService">The type to register.</typeparam>
      <typeparam name="TConcrete">The type of the concrete implementation.</typeparam>
      <param name="resolver">The resolver.</param>
    </member>
    <member name="M:OpenRasta.DI.DependencyResolverExtensions.AddDependency``2(OpenRasta.DI.IDependencyResolver,OpenRasta.DI.DependencyLifetime)">
      <summary>
            Adds a dependency of type <typeparamref name="TService" />, implemented by the type <typeparamref name="TConcrete" />, with the specified dependency lifetime.
            </summary>
      <typeparam name="TService">The type to register.</typeparam>
      <typeparam name="TConcrete">The type of the concrete implementation.</typeparam>
      <param name="resolver">The resolver.</param>
      <param name="lifetime">The lifetime of the type.</param>
    </member>
    <member name="M:OpenRasta.DI.DependencyResolverExtensions.Resolve``1(OpenRasta.DI.IDependencyResolver)">
      <summary>
            Returns an instance of a registered dependency of type T.
            </summary>
      <typeparam name="T">The dependency type.</typeparam>
      <param name="resolver">
      </param>
      <returns>An instance of T.</returns>
      <exception cref="T:OpenRasta.DI.DependencyResolutionException">The resolver couldn't resolve the exception.</exception>
    </member>
    <member name="P:OpenRasta.Web.IRequest.Uri">
      <summary>
            The request Uri
            </summary>
    </member>
    <member name="P:OpenRasta.Web.IRequest.UriName">
      <summary>
            The name associated with the requested URI
            </summary>
    </member>
    <member name="P:OpenRasta.Web.IRequest.NegotiatedCulture">
      <summary>
            The culture in which the resource has been requested by the client.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.IRequest.HttpMethod">
      <summary>
            The HTTP method used.
            </summary>
    </member>
    <member name="T:OpenRasta.IO.DeterministicStreamWriter">
      <summary>
            Implements a StreamWriter that does not close or dispose the stream when it doesn't own it.
            </summary>
    </member>
    <member name="M:OpenRasta.IO.DeterministicStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,OpenRasta.IO.StreamActionOnDispose)">
      <summary>
            Initializes a new instance of the <see cref="T:OpenRasta.IO.DeterministicStreamWriter" /> class.
            </summary>
      <param name="stream">The stream to write to.</param>
      <param name="encoding">The encoding used when writing to the stream.</param>
      <param name="action">The action to take for the stream when the writer is closed.</param>
    </member>
    <member name="T:OpenRasta.IO.LengthTrackingStream">
      <summary>
            Provides a stream that can keep track of how much data was written to a non-seekable stream.
            </summary>
    </member>
    <member name="T:OpenRasta.IO.StreamActionOnDispose">
      <summary>
            Defines what happens to a stream when the user of the stream gets disposed.
            </summary>
    </member>
    <member name="F:OpenRasta.IO.StreamActionOnDispose.Close">
      <summary>
            The stream is closed when the owner is disposed.
            </summary>
    </member>
    <member name="F:OpenRasta.IO.StreamActionOnDispose.None">
      <summary>
            The stream is not closed.
            </summary>
    </member>
    <member name="M:OpenRasta.OperationModel.OperationRequestCodecExtensions.GetRequestCodec(OpenRasta.OperationModel.IOperation)">
      <summary>
            Gets The codec used to read the request.
            </summary>
    </member>
    <member name="P:OpenRasta.TypeSystem.IMember.Type">
      <summary>
            Returns the type of the current member
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages">
      <summary>
            Contains all the known stages 
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.IBegin">
      <summary>
            Represents the first stage in the pipeline.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.IUriMatching">
      <summary>
            Represents the stage at which the URI is matched to find a resource.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.IHandlerSelection">
      <summary>
            Represents the stage at which handlers are selected for a resource.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.IOperationCreation">
      <summary>
            Represents the stage at which the operations available on a handler get created.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.IOperationFiltering">
      <summary>
            Represents the stage at which operations get filtered out and ignored.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.ICodecRequestSelection">
      <summary>
            Represents the stage at which a codec is chosen to process the request entity.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.IRequestDecoding">
      <summary>
            Represents the stage at which the operations get populated with data from the URI
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.IOperationExecution">
      <summary>
            Represents the stage at which the operation is being executed.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.IOperationResultInvocation">
      <summary>
            Represents the stage at which the operation result gets executed.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.ICodecResponseSelection">
      <summary>
            Represents the stage at which a codec is found to render the response resource.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.IResponseCoding">
      <summary>
            Represents the stage at which the codec is rendering the response resource.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.KnownStages.IEnd">
      <summary>
            Represents the end of the pipeline.
            </summary>
    </member>
    <member name="T:OpenRasta.OperationModel.CodecSelectors.RequestCodecSelector">
      <summary>
            Resolves a compatible codec for an operation, and filters out operations
            that do not have a codec capable of processing the request.
            </summary>
    </member>
    <member name="M:OpenRasta.OperationModel.OperationExtensions.CountReady(System.Collections.Generic.IEnumerable{OpenRasta.OperationModel.InputMember})">
      <summary>
            Returns the number of members ready for invocation (aka either having a default value or having had a value assigned to them).
            </summary>
      <param name="members">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.OperationModel.OperationExtensions.Optional(System.Collections.Generic.IEnumerable{OpenRasta.OperationModel.InputMember})">
      <summary>
            Returns a list of members not required for an operation to execute.
            </summary>
      <param name="members">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.OperationModel.OperationExtensions.Required(System.Collections.Generic.IEnumerable{OpenRasta.OperationModel.InputMember})">
      <summary>
            Returns the list of members required for an operation to execute.
            </summary>
      <param name="members">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.TypeSystem.IProperty.CreateBuilder">
      <summary>
            Returns a new instance of an instance builder.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.TypeSystem.IProperty.GetCallStack">
      <summary>
            Gets a list of the intermediate properties required along the chain call to assign this property.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:OpenRasta.TypeSystem.IProperty.PropertyParameters">
      <summary>
            Defines the parameters for indexed properties
            </summary>
    </member>
    <member name="P:OpenRasta.TypeSystem.IProperty.Owner">
      <summary>
            Defines the member (an IType or another IProperty) owning this property
            </summary>
    </member>
    <member name="P:OpenRasta.TypeSystem.IProperty.CanWrite">
      <summary>
            Gets a value defining if the property can be written to.
            </summary>
    </member>
    <member name="T:OpenRasta.TypeSystem.ITypeSystem">
      <summary>
            Represents the type system used by OpenRasta for executing objects.
            </summary>
    </member>
    <member name="P:OpenRasta.TypeSystem.ITypeSystem.SurrogateFactory">
      <summary>
            Gets or sets the surrogate factory used to build surrogate types.
            </summary>
    </member>
    <member name="T:OpenRasta.TypeSystem.IPathManager">
      <summary>
            Represents the componenet responsible for generating and parsing object paths.
            </summary>
    </member>
    <member name="M:OpenRasta.TypeSystem.IPathManager.ReadComponents(System.String)">
      <summary>
            Gets the list of components in an object path.
            </summary>
      <param name="objectPath">The object path to parse.</param>
      <returns>The individual components in the path.</returns>
    </member>
    <member name="P:OpenRasta.TypeSystem.ReflectionBased.ReflectionBasedProperty.Property">
      <summary>
            Defines the PropertyInfo of the property as defined on the owner type
            </summary>
    </member>
    <member name="P:OpenRasta.TypeSystem.ReflectionBased.ReflectionBasedProperty.PropertyParameters">
      <summary>
            Defines the parameters for indexer properties
            </summary>
    </member>
    <member name="P:OpenRasta.TypeSystem.ReflectionBased.ReflectionBasedProperty.Owner">
      <summary>
            Defines the type owning this property
            </summary>
    </member>
    <member name="M:OpenRasta.TypeSystem.PropertyBuilder.TrySetValue``1(System.Collections.Generic.IEnumerable{``0},OpenRasta.Binding.ValueConverter{``0})">
      <summary>
            Tries to assign a property value and return true if it was successfully assigned or if the parent wasn't available.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="values">
      </param>
      <param name="converter">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.TypeSystem.PropertyBuilder.SetOwner(OpenRasta.TypeSystem.IMemberBuilder)">
      <exception cref="T:System.ArgumentNullException">
        <c>parentBuilder</c> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The property instance has already been attached to a parent.</exception>
    </member>
    <member name="T:OpenRasta.TypeSystem.ReflectionBased.Surrogates.ListIndexerSurrogate`1">
      <summary>
            Provides a surrogate for types implementing IList of T.
            </summary>
    </member>
    <member name="T:OpenRasta.TypeSystem.ReflectionBased.ReflectionBasedType">
      <summary>
            Represents a CLR-based type.
            </summary>
    </member>
    <member name="M:OpenRasta.TypeSystem.TypeBuilder.Create">
      <exception cref="T:System.ArgumentNullException">
        <c>instance</c> is null.</exception>
    </member>
    <member name="M:OpenRasta.TypeSystem.TypeBuilder.Apply(System.Object)">
      <exception cref="T:System.ArgumentNullException">
        <c>instance</c> is null.</exception>
    </member>
    <member name="T:OpenRasta.Text.Rfc2047Encoding">
      <summary>
            Provides partial implementation for decoding strings according to RFC2047.
            </summary>
      <remarks>
            This implementation is not yet conformant to rfc2047.
            </remarks>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IBdoElement">
      <summary>
            Represents the &lt;bdo&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IBaseElement">
      <summary>
            Represents the &lt;base&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ICaptionElement">
      <summary>
            Represents the &lt;caption&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IContentSetFlow">
      <summary>
        <para>Represens the set of Flow elements</para>
        <para>
            Block elements: &lt;address&gt;, &lt;blockquote&gt;, &lt;div&gt;, &lt;p&gt;, &lt;pre&gt;, &lt;script&gt;, &lt;noscript&gt;</para>
        <para>
            Form elements: &lt;form&gt; and &lt;fieldset&gt;
            </para>
        <para>
            Table elements: &lt;table&gt;
            </para>
        <para>
            List elements: &lt;dl&gt;, &lt;ol&gt; and &lt;ul&gt;
            </para>
        <para>
            Header elements: &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;
            </para>
        <para>
            Inline Elements: &lt;a&gt;, &lt;del&gt;, &lt;ins&gt;, &lt;iframe&gt;, &lt;script&gt;, &lt;noscript&gt; and &lt;object&gt;
            </para>
        <para>
            Empty elements: &lt;hr&gt;, &lt;br&gt; and &lt;img&gt;</para>
        <para>
            Text elements: &lt;abbr&gt;, &lt;acronym&gt;, &lt;b&gt;, &lt;big&gt;, &lt;cite&gt;, &lt;code&gt;, &lt;dfn&gt;, &lt;em&gt;, &lt;i&gt;, &lt;kbd&gt;, &lt;samp&gt;, &lt;small&gt;, &lt;span&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;tt&gt; and &lt;var&gt;
            </para>
      </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IContentSetBlock">
      <summary>
        <para>Represents the set of Block elements.</para>
        <para>
            Block elements: &lt;address&gt;, &lt;blockquote&gt;, &lt;div&gt;, &lt;p&gt;, &lt;pre&gt;, &lt;script&gt;, &lt;noscript&gt;
            </para>
        <para>
            Form elements: &lt;form&gt; and &lt;fieldset&gt;
            </para>
        <para>
            Table elements: &lt;table&gt;
            </para>
      </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ITableElement">
      <summary>
            Represents the &lt;table&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ITHeadElement">
      <summary>
            Represents the &lt;thead&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ITBodyElement">
      <summary>
            Represents the &lt;tbody&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ITFootElement">
      <summary>
            Represents the &lt;tfoot&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ITrElement">
      <summary>
            Represents the &lt;tr&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IColElement">
      <summary>
            Defines the &lt;col&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IColGroupElement">
      <summary>
            Defines the &lt;colgroup&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ITdElement">
      <summary>
            Represents the &lt;td&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IThElement">
      <summary>
            Represents the &lt;th&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Attributes.DigitBooleanAttribute">
      <summary>
            Annotation for attributes using 1 and 0 as boolean values.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Attributes.Annotations.BooleanAttribute">
      <summary>
            Represents a boolean sgmml attribute, of the form attrib="attrib"
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IBodyElement">
      <summary>
            Represents the &lt;body&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IHeadElement">
      <summary>
            Represents the &lt;head&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IHtmlElement">
      <summary>
            Represents the &lt;html&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.ITitleElement">
      <summary>
            Represents the &lt;title&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IContentSetHeading">
      <summary>
        <para>Represents the set of Heading elements.</para>
        <para>
            Header elements: &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;
            </para>
      </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IHElement">
      <summary>
            Represents the &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt; and &lt;h6&gt; elements.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IAddressElement">
      <summary>
            Represents the &lt;address&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IBlockQuoteElement">
      <summary>
            Represents the &lt;blockquote&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IDivElement">
      <summary>
            Represents the &lt;div&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IPElement">
      <summary>
            Represents the &lt;p&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IPreElement">
      <summary>
            Represents the &lt;pre&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IContentSetInline">
      <summary>
        <para>Represents the set of Inline elements.</para>
        <para>
            Inline Elements: &lt;a&gt;, &lt;del&gt;, &lt;ins&gt;, &lt;iframe&gt;, &lt;script&gt;, &lt;noscript&gt; and &lt;object&gt;
            </para>
        <para>
            Empty elements: &lt;hr&gt;, &lt;br&gt; and &lt;img&gt;</para>
        <para>
            Text elements: &lt;abbr&gt;, &lt;acronym&gt;, &lt;b&gt;, &lt;big&gt;, &lt;cite&gt;, &lt;code&gt;, &lt;dfn&gt;, &lt;em&gt;, &lt;i&gt;, &lt;kbd&gt;, &lt;samp&gt;, &lt;small&gt;, &lt;span&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;tt&gt; and &lt;var&gt;
            </para>
      </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IInlineElement">
      <summary>
            Represents the &lt;abbr&gt;, &lt;acronym&gt;, &lt;b&gt;, &lt;big&gt;, &lt;cite&gt;, &lt;code&gt;, &lt;dfn&gt;, &lt;em&gt;, &lt;i&gt;, &lt;kbd&gt;, &lt;samp&gt;, &lt;small&gt;, &lt;span&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;tt&gt; and &lt;var&gt; elements.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IQElement">
      <summary>
            Represents the &lt;q&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IAElement">
      <summary>
            Represents the &lt;a&gt; element
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IContentSetList">
      <summary>
        <para>Represents the set of list elements</para>
        <para>
            List elements: &lt;dl&gt;, &lt;ol&gt; and &lt;ul&gt;
            </para>
      </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IDlElement">
      <summary>
            Represents the &lt;dl&gt; element
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IDtElement">
      <summary>
            Represents the &lt;dt&gt; element
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IDdElement">
      <summary>
            Represents the &lt;dd&gt; element
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IListElement">
      <summary>
            Represents the &lt;ul&gt; and &lt;ol&gt; elements
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.ILiElement">
      <summary>
            Represents the &lt;li&gt; element
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IEditElement">
      <summary>
            Represents the &lt;del&gt; and &lt;ins&gt; elements.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IEmptyElement">
      <summary>
            Represents the &lt;img&gt;, &lt;hr&gt; and &lt;br&gt; elements
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IImgElement">
      <summary>
            Represents the &lt;img&gt; element
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IContentSetForm">
      <summary>
        <para>Represents the set of form elements.</para>
        <para>
            Form elements: &lt;form&gt; and &lt;fieldset&gt;
            </para>
      </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IFormElement">
      <summary>
            Represents the &lt;form&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IContentSetFormctrl">
      <summary>
        <para>Represents the set of form control elements.</para>
        <para>
            Form control elements: &lt;input&gt;, &lt;select&gt;, &lt;textarea&gt;, &lt;label&gt; and &lt;button&gt;
            </para>
      </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IInputCheckedElement">
      <summary>
            Represents the input tags checkbox and radio
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IInputTextElement">
      <summary>
            Represents the &lt;input type="text" /&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IInputImageElement">
      <summary>
            Represents the &lt;input type="image" /&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IOptionElement">
      <summary>
            Represents the &lt;option&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IOptgroupElement">
      <summary>
            Represents the &lt;optgroup&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IObjectElement">
      <summary>
            Represents the &lt;object&gt; element
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IParamElement">
      <summary>
            Represents the &lt;param&gt; element
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IIFrameElement">
      <summary>
            Represents the &lt;iframe&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IMetaElement">
      <summary>
            Represents the &lt;meta&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IStyleElement">
      <summary>
            Represents the &lt;style&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.ILinkElement">
      <summary>
            Represents the &lt;link&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.IScriptElement">
      <summary>
            Represents the &lt;script&lt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Elements.INoScriptElement">
      <summary>
            Represents the &lt;noscript&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ITextAreaElement">
      <summary>
            Represents the &lt;textarea&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ISelectElement">
      <summary>
            Represents the &lt;select&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ILabelElement">
      <summary>
            Represents the &lt;label&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IFieldsetElement">
      <summary>
            Represents the &lt;fieldset&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.ILegendElement">
      <summary>
            Represents the &lt;legend&gt; element.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.Modules.IButtonElement">
      <summary>
            Represents the &lt;button&gt; element.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.Markup.IXhtmlAnchor.User">
      <summary>
            Gets the principal object representing the current user's credentials.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.Markup.XhtmlAnchor">
      <summary>
            Marker class used to provide xhtml-related functionality from within pages using extension methods.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.IHttpEntity.Errors">
      <summary>
            Provides access to a list of errors associated with the entity
            </summary>
    </member>
    <member name="P:OpenRasta.IO.BoundaryStreamReader.BoundarySubStream.Length">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
    </member>
    <member name="P:OpenRasta.IO.BoundaryStreamReader.BoundarySubStream.Position">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
    </member>
    <member name="M:OpenRasta.IO.BoundaryStreamReader.ReadLine">
      <summary>
            Used only to parse boundaries and headers. ASCII always.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:OpenRasta.IO.HistoryStream">
      <summary>
            Provides a stream over non-seekable streams that buffers all read calls
            and provide a seekable recent history of the stream.
            </summary>
    </member>
    <member name="M:OpenRasta.UriTemplateTable.MakeReadOnly(System.Boolean)">
      <exception cref="T:System.InvalidOperationException">You need to set a BaseAddress before calling MakeReadOnly</exception>
    </member>
    <member name="M:OpenRasta.UriTemplateTable.MatchSingle(System.Uri)">
      <exception cref="T:OpenRasta.UriTemplateMatchException">Several matching templates were found.</exception>
    </member>
    <member name="M:OpenRasta.UriTemplateTable.EnsureAllTemplatesAreDifferent">
      <exception cref="T:System.InvalidOperationException">Two equivalent templates were found.</exception>
    </member>
    <member name="T:OpenRasta.Web.HttpHeaderDictionary">
      <summary>
            Provides a list of http headers. In dire need of refactoring to use specific header types similar to http digest.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.Contributors.HandlerResolverContributor">
      <summary>
            Resolves the handler attached to a resource type.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.Contributors.HttpMethodOverriderContributor">
      <summary>
            Supports the use of the X-HTTP-Method-Override header to override the verb used
            by OpenRasta for processing.
            </summary>
      <remarks>Clients that can add http headers may not support other verbs than POST (Flash and Silverlight for example). With the X-HTTP-Method-Override header, OpenRasta will process the request as if it was made using a genuine http verb.</remarks>
    </member>
    <member name="M:OpenRasta.TypeSystem.TypeExtensions.CreateInstance(OpenRasta.TypeSystem.IType,OpenRasta.DI.IDependencyResolver)">
      <summary>
            Returns an instance of the type, optionally through the container if it is supported.
            </summary>
      <param name="type">
      </param>
      <param name="resolver">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:OpenRasta.Pipeline.PipelineContinuation.Abort">
      <summary>
            An error occured and the pipeline should abort.
            </summary>
      <remarks>Aborting the pipeline will result in the error list 
            being sent back to the client</remarks>
    </member>
    <member name="F:OpenRasta.Pipeline.PipelineContinuation.Finished">
      <summary>
            Processing of the pipeline is complete.
            </summary>
    </member>
    <member name="F:OpenRasta.Pipeline.PipelineContinuation.Continue">
      <summary>
            Continue processing the pipeline.
            </summary>
    </member>
    <member name="T:OpenRasta.TypeSystem.ParameterInstance">
      <summary>
            Represents an instance of a method parameter.
            </summary>
    </member>
    <member name="P:OpenRasta.TypeSystem.ParameterInstance.HasAssignedValue">
      <summary>
            The parameter has been assigned a value through its Value property.
            </summary>
    </member>
    <member name="M:OpenRasta.TypeSystem.ReflectionBased.ReflectionExtensions.CreateInstanceFrom(System.Type,System.String)">
      <summary>
            Creates a type using the provided string to initialize its values.
            </summary>
      <param name="type">The type of object to create.</param>
      <param name="propertyValue">The value to assign to the created object.</param>
      <returns>The created object.</returns>
    </member>
    <member name="M:OpenRasta.TypeSystem.ReflectionBased.ReflectionExtensions.CreateInstanceFrom(System.Type,System.Object)">
      <exception cref="T:System.NotSupportedException">You can only pass an array of strings or a single string</exception>
    </member>
    <member name="M:OpenRasta.TypeSystem.ReflectionBased.ReflectionExtensions.CreateInstanceFrom``1(System.Type,System.Collections.Generic.IEnumerable{``0},OpenRasta.Binding.ValueConverter{``0})">
      <exception cref="T:System.NotSupportedException">
        <c>NotSupportedException</c>.</exception>
    </member>
    <member name="M:OpenRasta.TypeSystem.ReflectionBased.ReflectionExtensions.FindIndexer(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,System.Reflection.ParameterInfo[]}},System.String[])">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="M:OpenRasta.TypeSystem.ReflectionBased.ReflectionExtensions.FindIndexers(System.Type,System.Int32)">
      <summary>
            Gets a list of default properties (indexers) with the provided number of parameters.
            </summary>
      <param name="target">
      </param>
      <param name="parameterCount">
      </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <c>target</c> is null.</exception>
    </member>
    <member name="M:OpenRasta.TypeSystem.ReflectionBased.ReflectionExtensions.FindInterface(System.Type,System.Type)">
      <summary>
            Returns the interface implemented by a type, or null if no matching interface was found.
            </summary>
      <param name="type">
      </param>
      <param name="interfaceType">The interface to look for, including open generic types, for exemple <c>typeof(IList&lt;&gt;)</c></param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentNullException">
        <c>type</c> is null.</exception>
      <exception cref="T:System.ArgumentException">The type is not an interface</exception>
    </member>
    <member name="M:OpenRasta.TypeSystem.ReflectionBased.ReflectionExtensions.GetInheritanceDistance(System.Type,System.Type)">
      <summary>
            Returns the distance in the inheritance chain between this type and the parent type.
            </summary>
      <param name="type">
      </param>
      <param name="parentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:OpenRasta.TypeSystem.ReflectionBased.ReflectionExtensions.Implements(System.Type,System.Type)">
      <summary>
            Returns true if the type implements the interface.
            </summary>
      <param name="type">
      </param>
      <param name="interfaceType">
      </param>
      <returns>
      </returns>
      <exception cref="T:System.ArgumentException">interfaceType is not an interface. Use InheritsFrom instead.</exception>
    </member>
    <member name="M:OpenRasta.TypeSystem.ReflectionBased.ReflectionExtensions.TryConvert``1(``0[],System.Type,OpenRasta.Binding.ValueConverter{``0},System.Action{System.Object})">
      <exception cref="T:System.NotSupportedException">Could not convert element {0} to {1}.</exception>
    </member>
    <member name="M:OpenRasta.DI.IDependencyResolver.Resolve(System.Type)">
      <summary>
            Resolves an instance of a type.
            </summary>
      <param name="type">
      </param>
      <returns>An instance of the type.</returns>
    </member>
    <member name="T:OpenRasta.Web.MediaType">
      <summary>
            Represents an internet media-type as defined by RFC 2046.
            </summary>
    </member>
    <member name="M:OpenRasta.Web.MediaType.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:OpenRasta.Web.MediaType" /> class.
            </summary>
      <param name="contentType">A <see cref="T:System.String" />, for example, "text/plain; charset=us-ascii", that contains the internet media type, subtype, and optional parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contentType" /> is <see cref="F:System.String.Empty" /> ("").
            </exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> is in a form that cannot be parsed.
            </exception>
    </member>
    <member name="M:OpenRasta.Web.HttpOperationAttribute.Find(System.Reflection.MethodInfo)">
      <summary>
            Tries to find an HttpOperation attribute on a method. 
            </summary>
      <param name="mi">
      </param>
      <returns>The instance of the HttpOperation attribute, or null if none were defined.</returns>
    </member>
    <member name="M:OpenRasta.Codecs.ICodecRepository.FindMediaTypeReader(OpenRasta.Web.MediaType,System.Collections.Generic.IEnumerable{OpenRasta.TypeSystem.IMember},System.Collections.Generic.IEnumerable{OpenRasta.TypeSystem.IMember})">
      <summary>
            Selects the best codec for a given media type and a set of parameters to be resolved.
            </summary>
      <param name="contentType">
      </param>
      <param name="requiredTypes">
      </param>
      <param name="optionalTypes">
      </param>
      <returns>The codec registration and score matching the list of parameters.</returns>
      <remarks>
        <para>The score is calculated as the average distance of the codec to the parameter types.</para>
        <para>For example, if Customer inherits directly from Object, the distance between Object and Customer is 1,and the distance between Customer and itself is 0.</para>
      </remarks>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.Created">
      <summary>
            Represents a "201 Created" response.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.Found">
      <summary>
            Represents a 302 Found response: the requested resource resides temporarily under a different URI.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.MultipleRepresentations">
      <summary>
            Represents a 300 Multiple representations response.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.NoContent">
      <summary>
            Represents a "204 No content" response.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.OK">
      <summary>
            Represents a "200 OK" response.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.RequestMediaTypeUnsupported">
      <summary>
            The request media type (described by the Content-Type header in the request) could not be understood by the server. This will trigger a 415 error code.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.ResponseMediaTypeUnsupported">
      <summary>
            The resource represented by the request could not be returned in any format the client declared supporting through the Accept header.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.OperationResult.SeeOther">
      <summary>
            Represents a 303 See other response: the response to the request can be found under a different URI and SHOULD be retrieved using a GET method on that resource.
            </summary>
    </member>
    <member name="P:OpenRasta.Web.OperationResult.ResponseResource">
      <summary>
            Gets or sets the resource to be returned in the response messsage.
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.IPipeline">
      <summary>
            Represents an instance of an OpenRasta pipeline
            </summary>
    </member>
    <member name="T:OpenRasta.Pipeline.PipelineData">
      <summary>
      </summary>
      <remarks>Need to inherit from a yet to be created SafeDictionary</remarks>
    </member>
    <member name="P:OpenRasta.Pipeline.PipelineData.HandlerType">
      <summary>
            Gets the type of the handler selected when matching a request against the registerd resource.
            </summary>
    </member>
    <member name="P:OpenRasta.Pipeline.PipelineData.ResourceKey">
      <summary>
            Gets the resource key associated with the requestURI. 
            </summary>
    </member>
    <member name="P:OpenRasta.Pipeline.PipelineData.ResponseCodec">
      <summary>
            Gets the Codec associated with the response entity.
            </summary>
    </member>
    <member name="P:OpenRasta.Pipeline.PipelineData.SelectedResource">
      <summary>
            Provides access to the matched resource registration for a request URI.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.UriDecorators.IUriDecorator">
      <summary>
            Defines a decoration on a url, used to modify the context of the request and reshape a url before processing.
            </summary>
    </member>
    <member name="M:OpenRasta.Web.UriDecorators.IUriDecorator.Parse(System.Uri,System.Uri@)">
      <summary>
            Parses a Uri.
            </summary>
      <param name="uri">The uri to process</param>
      <param name="processedUri">The uri after processing</param>
      <returns>true if work needs to be done after the Uri processing is done, resulting in a call to Apply(). Otherwise false.</returns>
    </member>
    <member name="M:OpenRasta.Web.UriDecorators.IUriDecorator.Apply">
      <summary>
            Applies any changes after al the Uri decorators have been called.
            </summary>
    </member>
    <member name="T:OpenRasta.Web.UriDecorators.ContentTypeExtensionUriDecorator">
      <summary>
            Decorates a uri with an extension, similar to a file system extension, to override content-type negotiation.
            </summary>
      <remarks>
            The extension is always processed at the end of the uri, and separated by a dot.
            The matching is done per-resource, based on the extension declared for the codec
            associated with a resource.
            </remarks>
    </member>
    <member name="P:OpenRasta.Configuration.OpenRastaConfiguration.Manual">
      <summary>
            Creates a manual configuration of the resources supported by the application.
            </summary>
    </member>
    <member name="M:OpenRasta.Codecs.CodecRepository.FindMediaTypeReader(OpenRasta.Web.MediaType,System.Collections.Generic.IEnumerable{OpenRasta.TypeSystem.IMember},System.Collections.Generic.IEnumerable{OpenRasta.TypeSystem.IMember})">
      <exception cref="T:System.ArgumentNullException">
        <c>requestedMediaType</c> is null.</exception>
    </member>
    <member name="M:OpenRasta.Codecs.CodecRegistration.CheckArgumentsAreValid(System.Type,System.Object,OpenRasta.Web.MediaType,System.Boolean)">
      <exception cref="T:System.ArgumentException">Cannot do a strict registration on resources with keys that are not types.</exception>
      <exception cref="T:System.ArgumentNullException">
        <c>mediaType</c> is null.</exception>
    </member>
    <member name="P:OpenRasta.Codecs.CodecRegistration.IsSystem">
      <summary>
            Defines if the codec is to be preserved between configuration refreshes because it is part of the
            OpenRasta framework.
            </summary>
    </member>
    <member name="M:OpenRasta.Web.TemplatedUriResolver.Add(OpenRasta.Web.UriRegistration)">
      <exception cref="T:System.InvalidOperationException">Cannot add a Uri mapping once the configuration has been done.</exception>
      <exception cref="T:System.ArgumentException">Cannot use a Type as the resourceKey. Use an <see cref="T:OpenRasta.TypeSystem.IType" /> instead or assign the <see cref="P:OpenRasta.Web.TemplatedUriResolver.TypeSystem" /> property.</exception>
    </member>
    <member name="M:OpenRasta.Web.TemplatedUriResolver.CreateUriFor(System.Uri,System.Object,System.String,System.Collections.Specialized.NameValueCollection)">
      <exception cref="T:System.InvalidOperationException">
        <c>InvalidOperationException</c>.</exception>
    </member>
    <member name="P:OpenRasta.Web.TemplatedUriResolver.TypeSystem">
      <summary>
            The TypeSystem to use for any resource key that is a type
            </summary>
    </member>
    <member name="M:OpenRasta.Configuration.JsonConfigurationExtensions.AsJsonDataContract(OpenRasta.Configuration.Fluent.ICodecParentDefinition)">
      <summary>
            Enables reading and writing JSON representations of a resource using the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.
            </summary>
      <param name="codecParent">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:IQ.ExpressionComparer">
      <summary>
            Compare two expressions to determine if they are equivalent
            </summary>
    </member>
    <member name="M:OpenRasta.Reflection.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
      <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
      <param name="expression">The root of the expression tree.</param>
      <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
      <returns>A new tree with sub-trees evaluated and replaced.</returns>
    </member>
    <member name="M:OpenRasta.Reflection.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
      <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
      <param name="expression">The root of the expression tree.</param>
      <returns>A new tree with sub-trees evaluated and replaced.</returns>
    </member>
    <member name="T:OpenRasta.Reflection.SubtreeEvaluator">
      <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
    </member>
    <member name="T:OpenRasta.Reflection.SubtreeNominator">
      <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
    </member>
  </members>
</doc>